<html class="no-js" lang="">

{% include 'admin/head.html.twig' %}

<body>
{% include 'admin/Header.html.twig' %}



<div class="container"><div class='row'><div class="col-xs-12"><div id="conversation"></div></div></div><div class="row"><div class="col-xs-12"><div id="response">
                </div></div></div></div>

</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
<script src="https://apis.google.com/js/client.js?onload=onClientLoad" type="text/javascript"></script>
<script src="../js/annyang.min.js"></script>
<script src="../js/speechkitt.min.js"></script>
<script>
    window.onload = function(){
        var OAUTH2_CLIENT_ID = 'AIzaSyDHClomzxAUxQgq4EHGQ7S_CdBLvzXHHO0';
        var OAUTH2_SCOPES = [
            'https://www.googleapis.com/auth/youtube'
        ];

        function showResponse(response) {

            var items=response.result.items;
            $.each(items, function(index, item) {
                alert(JSON.stringify(item));
                document.getElementById('response').innerHTML = "<iframe class=\"embeded-spotify\"  src=\"https://www.youtube.com/embed/"+item.id.videoId+"?autoplay=1\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>";
            });
        }

// Called automatically when JavaScript client library is loaded.
        function onClientLoad() {
            gapi.client.load('youtube', 'v3', onYouTubeApiLoad);
        }

// Called automatically when YouTube API interface is loaded (see line 9).
        function onYouTubeApiLoad() {
            // This API key is intended for use only in this lesson.
            // See http://goo.gl/PdPA1 to get a key for your own applications.
            gapi.client.setApiKey('AIzaSyCR5In4DZaTP6IEZQ0r1JceuvluJRzQNLE');


        }

        function search(q) {
            // Use the JavaScript client library to create a search.list() API call.
            var request = gapi.client.youtube.search.list({
                part: 'snippet',
                q:q,
                maxResults: 1
            });

            // Send the request to the API server,
            // and invoke onSearchRepsonse() with the response.
            request.execute(onSearchResponse);
        }

// Called automatically with the response of the YouTube API request.
        function onSearchResponse(response) {
            showResponse(response);
        }
        var access_token;
        var token_type;
        var scope;
        var expires_in;
        var refresh_token;


        if (annyang) {
            (function () {
                var audio = new Audio();


                function searchTracks(query) {
                    $.ajax({
                        url: 'https://api.spotify.com/v1/search',
                        headers: {
                            'Authorization': 'Bearer ' + "{{ result }}",

                        },
                        data: {
                            q: query,
                            type: 'track'
                        },
                        success: function (response) {
                            if (response.tracks.items.length) {
                                var track = response.tracks.items[0];
                               // audio.src = track.preview_url;
                                audio.play();

                                communicateAction('<iframe class="embeded-spotify" src="https://embed.spotify.com/?uri='+track.uri+'" width="300" height="380" frameborder="0" allowtransparency="true"></iframe>')
                            }
                        }
                    });
                }
                function searchTracksYoutube(query) {
                    $.ajax({
                        url: 'https://www.googleapis.com/youtube/v3/search'
                        ,
                        data: {
                            q: query,
                            maxResults: 1,
                            part:"snippet"
                        },
                        success: function (response) {
                            if (response.tracks.items.length) {
                                alert(response);
                                var track = response.tracks.items[0];
                                // audio.src = track.preview_url;
                                audio.play();

                                communicateAction('<iframe class="embeded-spotify" src="https://youtu.be/'+track.uri+'" width="300" height="380" frameborder="0" allowtransparency="true"></iframe>')
                            }
                        }
                    });
                }
                onClientLoad();
                function playSong(songName, artistName) {
                    var query = songName;
                    if (artistName) {
                        query += ' artist:' + artistName;
                    }

                    searchTracks(query);
                }
                function YoutubeSearch(songName){
                    var query = songName;
                    searchTracksYoutube(query);
                }

                function communicateAction(text) {
                    var rec = document.getElementById('conversation');
                    rec.innerHTML = '<div class="action">' + text + '</div>';
                    $("#play-button").click();
                }

                function recognized(text) {
                    var rec = document.getElementById('conversation');
                    rec.innerHTML = '<div class="recognized"><div>' + text + '</div></div>';
                    $("#play-button").click();
                }

                if (annyang) {
                    annyang.debug();
                    // Let's define our first command. First the text we expect, and then the function it should call
                    var commands = {
                        'stop': function () {
                            alert("ok");
                            $("#play-button").click();
                        },
                        'start': function () {
                            alert("ok");

                            $("#play-button").click();
                        },
                        'down': function () {
                            audio.volume=audio.volume-0.5;
                        },
                        'up': function () {
                            audio.volume=audio.volume+0.5;
                        },

                        'play track *song': function (song) {
                            recognized('Play track ' + song);
                            playSong(song);
                        },
                        'play *song by *artist': function (song, artist) {
                            recognized('Play song ' + song + ' by ' + artist);
                            playSong(song, artist);
                        },
                        'play song *song': function (song) {
                            recognized('Play song ' + song);
                            playSong(song);
                        },
                        'play *song': function (song) {
                            recognized('Play ' + song);
                            playSong(song);
                        },'youtube *song': function (song) {
                            recognized('Play ' + song);

                            search(song);
                        },

                        ':nomatch': function (message) {
                            alert(message);
                            recognized(message);
                            communicateAction('Sorry, I don\'t understand this action');
                        }
                    };

                    // Add our commands to annyang
                    annyang.addCommands(commands);

                    // Start listening. You can call this here, or attach this call to an event, button, etc.
                    SpeechKITT.annyang();

                    // Define a stylesheet for KITT to use
                    SpeechKITT.setStylesheet('../css/flat.css');

                    // Render KITT's interface
                    SpeechKITT.vroom();
                }

                annyang.addCallback('error', function () {

                });
            })();
        } else {
            alert("errro");
            return;
        }
    }
</script>



















</body>
<script src="../js/vendor/jquery-1.11.2.min.js"></script>
<script data-pace-options='{ "ajax": false }' src="../js/vendor/pace.min.js"></script>
<script src="../js/vendor/bootstrap.min.js"></script>
<script src="../js/vendor/classie.js"></script>
<script src="../js/vendor/isotope.pkgd.min.js"></script>
<script src="../js/vendor/jquery.velocity.min.js"></script>
<script src="../js/vendor/jquery.kenburnsy.min.js"></script>
<script src="../js/vendor/textslide.js"></script>
<script src="../js/vendor/imagesloaded.pkgd.min.js"></script>
<script src="../js/vendor/tabs.js"></script>
<script src="../js/ef-slider.js"></script>
<script src="../js/vendor/owl.carousel.min.js"></script>
<script src="../js/vendor/jquery.magnific-popup.min.js"></script>
<script src="../js/vendor/jquery.social-buttons.min.js"></script>
<script src="../js/vendor/wow.min.js"></script>
<script src="../js/main.js"></script>
<script src="../js/ajax.js"></script>
<script src="../js/tinymce.min.js"></script>
<script src="../js/scripts.js"></script>
<script>tinymce.init({
        selector: 'textarea',
        height: 500,
        theme: 'modern',
        plugins: [
            "advlist autolink autosave link image lists charmap print preview hr anchor pagebreak spellchecker",
            "searchreplace wordcount visualblocks visualchars code fullscreen insertdatetime media nonbreaking",
            "save table contextmenu directionality emoticons template textcolor paste  textcolor colorpicker"
        ],        toolbar1: 'formatselect | bold italic strikethrough forecolor backcolor | link | alignleft aligncenter alignright alignjustify  | numlist bullist outdent indent  | removeformat',
        image_advtab: true,
        templates: [
            { title: 'Test template 1', content: 'Test 1' },
            { title: 'Test template 2', content: 'Test 2' }
        ],
        content_css: [
            '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i',
            '//www.tinymce.com/css/codepen.min.css'
        ]
    });</script>
</html>